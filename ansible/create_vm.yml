---
- name: manage libvirt guests
  hosts: ubuntu

  vars_files:
      - vars/guests.yml

  tasks:
      - name: start libvirtd
        service: name=libvirtd state=started enabled=yes
        register: libvirtd

      - name: wait for libvirtd to get up
        pause: seconds=30
        when: libvirtd.changed

      - name: get list of vms
        virt: command=list_vms
        register: virt_vms

      - name: Copy templates
        template:
          src: templates/preseed.cfg
          dest: /var/lib/libvirt/images/{{ item.name }}-preseed.cfg
        when: item.name not in virt_vms.list_vms
        with_items: guests

      - name: create vm
        command: virt-install -n {{item.name}}
                 --connect qemu:///system \
                 --name {{ item.name }} \
                 --vcpus {{ item.cpu }}
                 --ram  {{ item.mem }} \
                 --disk size={{item.disk.size}},path={{item.disk.path}}/{{item.name}}.img,bus=virtio,sparse=false
                 --network network=default,model=virtio \
                 --location {{ item.url }}
                 --os-type {{ item.os.type }}
                 --os-variant {{ item.os.variant }}
                 --virt-type {{ item.virt_type }}
                 --initrd-inject=/var/lib/libvirt/images/{{ item.name }}-preseed.cfg \
                 --extra-args="locale=en_US.UTF-8 console-setup/ask_detect=false keyboard-configuration/layoutcode=fr file=file:/{{ item.name }}-preseed.cfg vga=788 quiet" \
                 --graphics vnc \
                 --noreboot \
                 --{{item.virt_hypervisor}} \
                 --noautoconsole
#                 --video=vga \
        when: item.name not in virt_vms.list_vms
        with_items: guests

      - name: get guest info
        virt: command=info
        register: virt_info

      - name: make sure all vms are running
        virt: name={{item.name}} command=start
        when: virt_info[item.name]['state'] != 'running'
        with_items: guests
